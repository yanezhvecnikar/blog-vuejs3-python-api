from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from utils import is_admin
from keyboards import admin_kb
from db_utils import add_project, delete_project, get_all_projects

router = Router()

# –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É
@router.message(F.text == "/admin")
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
        return
    await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_kb)


class AddProject(StatesGroup):
    waiting_for_data = State()

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
async def add_project_start(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    await state.set_state(AddProject.waiting_for_data)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|GitHub URL|Image URL`",
        parse_mode="Markdown"
    )

@router.message(AddProject.waiting_for_data)
async def add_project_save(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return

    try:
        title, desc, github, image = message.text.split("|", 3)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n`–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|GitHub URL|Image URL`", parse_mode="Markdown")
        return

    await add_project(title.strip(), desc.strip(), github.strip(), image.strip())
    await state.clear()
    await message.answer("‚úÖ –ü—Ä–æ–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_kb)


# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
async def delete_project_start(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    await message.answer("–í–≤–µ–¥–∏ ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")


@router.message(F.text.regexp(r"^\d+$"))
async def delete_project_confirm(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    project_id = int(message.text)
    await delete_project(project_id)
    await message.answer(f"üóë –ü—Ä–æ–µ–∫—Ç {project_id} —É–¥–∞–ª—ë–Ω.")


# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
@router.message(F.text == "üìú –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤")
async def list_projects(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    projects = await get_all_projects()
    if not projects:
        await message.answer("üìÇ –í –±–∞–∑–µ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.")
        return
    text = "\n\n".join([f"{p.id}. {p.title}\n{p.github_url}" for p in projects])
    await message.answer(f"üìú –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:\n\n{text}")
